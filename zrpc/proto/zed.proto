syntax = "proto3";
package zed.messages;

message Envelope {
    uint32 id = 1;
    optional uint32 responding_to = 2;
    optional uint32 original_sender_id = 3;
    oneof payload {
        Ping ping = 4;
        Pong pong = 5;
        Auth auth = 6;
        AuthResponse auth_response = 7;
        ShareWorktree share_worktree = 8;
        ShareWorktreeResponse share_worktree_response = 9;
        OpenWorktree open_worktree = 10;
        OpenWorktreeResponse open_worktree_response = 11;
        UpdateWorktree update_worktree = 12;
        CloseWorktree close_worktree = 13;
        OpenBuffer open_buffer = 14;
        OpenBufferResponse open_buffer_response = 15;
        CloseBuffer close_buffer = 16;
        UpdateBuffer update_buffer = 17;
        SaveBuffer save_buffer = 18;
        BufferSaved buffer_saved = 19;
        AddPeer add_peer = 20;
        RemovePeer remove_peer = 21;
        GetChannels get_channels = 22;
        GetChannelsResponse get_channels_response = 23;
        GetUsers get_users = 24;
        GetUsersResponse get_users_response = 25;
        JoinChannel join_channel = 26;
        JoinChannelResponse join_channel_response = 27;
        LeaveChannel leave_channel = 28;
        SendChannelMessage send_channel_message = 29;
        ChannelMessageSent channel_message_sent = 30;
    }
}

// Messages

message Ping {
    int32 id = 1;
}

message Pong {
    int32 id = 2;
}

message Auth {
    int32 user_id = 1;
    string access_token = 2;
}

message AuthResponse {
    bool credentials_valid = 1;
}

message ShareWorktree {
    Worktree worktree = 1;
}

message ShareWorktreeResponse {
    uint64 worktree_id = 1;
    string access_token = 2;
}

message OpenWorktree {
    uint64 worktree_id = 1;
    string access_token = 2;
}

message OpenWorktreeResponse {
    uint64 worktree_id = 1;
    Worktree worktree = 2;
    uint32 replica_id = 3;
    repeated Peer peers = 4;
}

message UpdateWorktree {
    uint64 worktree_id = 1;
    repeated Entry updated_entries = 2;
    repeated uint64 removed_entries = 3;
}

message CloseWorktree {
    uint64 worktree_id = 1;
}

message AddPeer {
    uint64 worktree_id = 1;
    Peer peer = 2;
}

message RemovePeer {
    uint64 worktree_id = 1;
    uint32 peer_id = 2;
}

message OpenBuffer {
    uint64 worktree_id = 1;
    string path = 2;
}

message OpenBufferResponse {
    Buffer buffer = 1;
}

message CloseBuffer {
    uint64 worktree_id = 1;
    uint64 buffer_id = 2;
}

message UpdateBuffer {
    uint64 worktree_id = 1;
    uint64 buffer_id = 2;
    repeated Operation operations = 3;
}

message SaveBuffer {
    uint64 worktree_id = 1;
    uint64 buffer_id = 2;
}

message BufferSaved {
    uint64 worktree_id = 1;
    uint64 buffer_id = 2;
    repeated VectorClockEntry version = 3;
    Timestamp mtime = 4;
}

message GetChannels {}

message GetChannelsResponse {
    repeated Channel channels = 1;
}

message JoinChannel {
    uint64 channel_id = 1;
}

message JoinChannelResponse {
    repeated ChannelMessage messages = 1;
}

message LeaveChannel {
    uint64 channel_id = 1;
}

message GetUsers {
    repeated uint64 user_ids = 1;
}

message GetUsersResponse {
    repeated User users = 1;
}

message SendChannelMessage {
    uint64 channel_id = 1;
    string body = 2;
}

message ChannelMessageSent {
    uint64 channel_id = 1;
    ChannelMessage message = 2;
}

// Entities

message Peer {
    uint32 peer_id = 1;
    uint32 replica_id = 2;
}

message User {
    uint64 id = 1;
    string github_login = 2;
    string avatar_url = 3;
}

message Worktree {
    string root_name = 1;
    repeated Entry entries = 2;
}

message Entry {
    uint64 id = 1;
    bool is_dir = 2;
    string path = 3;
    uint64 inode = 4;
    Timestamp mtime = 5;
    bool is_symlink = 6;
    bool is_ignored = 7;
}

message Buffer {
    uint64 id = 1;
    string content = 2;
    repeated Operation.Edit history = 3;
    repeated SelectionSetSnapshot selections = 4;
}

message SelectionSetSnapshot {
    uint32 replica_id = 1;
    uint32 local_timestamp = 2;
    repeated Selection selections = 3;
    bool is_active = 4;
}

message SelectionSet {
    repeated Selection selections = 1;
}

message Selection {
    uint64 id = 1;
    Anchor start = 2;
    Anchor end = 3;
    bool reversed = 4;
}

message Anchor {
    repeated VectorClockEntry version = 1;
    uint64 offset = 2;
    Bias bias = 3;
    enum Bias {
        LEFT = 0;
        Right = 1;
    }
}

message Operation {
    oneof variant {
        Edit edit = 1;
        Undo undo = 2;
        UpdateSelections update_selections = 3;
        SetActiveSelections set_active_selections = 4;
    }

    message Edit {
        uint32 replica_id = 1;
        uint32 local_timestamp = 2;
        uint32 lamport_timestamp = 3;
        repeated VectorClockEntry version = 4;
        repeated Range ranges = 5;
        optional string new_text = 6;
    }

    message Undo {
        uint32 replica_id = 1;
        uint32 local_timestamp = 2;
        uint32 lamport_timestamp = 3;
        repeated Range ranges = 4;
        repeated VectorClockEntry version = 5;
        repeated UndoCount counts = 6;
    }

    message UndoCount {
        uint32 replica_id = 1;
        uint32 local_timestamp = 2;
        uint32 count = 3;
    }

    message UpdateSelections {
        uint32 replica_id = 1;
        uint32 local_timestamp = 2;
        uint32 lamport_timestamp = 3;
        SelectionSet set = 4;
    }

    message SetActiveSelections {
        uint32 replica_id = 1;
        optional uint32 local_timestamp = 2;
        uint32 lamport_timestamp = 3;
    }
}

message VectorClockEntry {
    uint32 replica_id = 1;
    uint32 timestamp = 2;
}

message Timestamp {
    uint64 seconds = 1;
    uint32 nanos = 2;
}

message Range {
    uint64 start = 1;
    uint64 end = 2;
}

message Channel {
    uint64 id = 1;
    string name = 2;
}

message ChannelMessage {
    uint64 id = 1;
    string body = 2;
    uint64 timestamp = 3;
    uint64 sender_id = 4;
}