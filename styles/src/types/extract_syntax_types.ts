import fs from 'fs'
import path from 'path'
import readline from 'readline'

function escapeTypeName(name: string): string {
    return `'${name.replace('@', '').toLowerCase()}'`
}

const generatedNote = `// This file is generated by extract_syntax_types.ts
// Do not edit this file directly
// It is generated from the highlight.scm files in the zed crate

// To regenerate this file manually:
//     'npm run extract-syntax-types' from ./styles`

const defaultTextProperty = `    /** Default text color */
    | 'primary'`

const main = async () => {
    const pathFromRoot = 'crates/zed/src/languages'
    const directoryPath = path.join(__dirname, '../../../', pathFromRoot)
    const stylesMap: Record<string, Set<string>> = {}
    const propertyLanguageMap: Record<string, Set<string>> = {}

    const processFile = async (filePath: string, language: string) => {
        const fileStream = fs.createReadStream(filePath)
        const rl = readline.createInterface({
            input: fileStream,
            crlfDelay: Infinity,
        })

        for await (const line of rl) {
            const cleanedLine = line.replace(/"@[a-zA-Z0-9_.]*"/g, "")
            const match = cleanedLine.match(/@(\w+\.*)*/g)
            if (match) {
                match.forEach((property) => {
                    const formattedProperty = escapeTypeName(property)
                    // Only add non-empty properties
                    if (formattedProperty !== "''") {
                        if (!propertyLanguageMap[formattedProperty]) {
                            propertyLanguageMap[formattedProperty] = new Set()
                        }
                        propertyLanguageMap[formattedProperty].add(language)
                    }
                })
            }
        }
    }

    const directories = fs.readdirSync(directoryPath, { withFileTypes: true })
        .filter(dirent => dirent.isDirectory())
        .map(dirent => dirent.name)

    for (const dir of directories) {
        const highlightsFilePath = path.join(directoryPath, dir, 'highlights.scm')
        if (fs.existsSync(highlightsFilePath)) {
            await processFile(highlightsFilePath, dir)
        }
    }

    for (const [language, properties] of Object.entries(stylesMap)) {
        console.log(`${language}: ${Array.from(properties).join(', ')}`)
    }

    const sortedProperties = Object.entries(propertyLanguageMap).sort(([propA], [propB]) => propA.localeCompare(propB))

    const outStream = fs.createWriteStream(path.join(__dirname, 'syntax.ts'))
    let allProperties = ""
    const syntaxKeys = []
    for (const [property, languages] of sortedProperties) {
        let languagesArray = Array.from(languages)
        const moreThanSeven = languagesArray.length > 7
        // Limit to the first 7 languages, append "..." if more than 7
        languagesArray = languagesArray.slice(0, 7)
        if (moreThanSeven) {
            languagesArray.push('...')
        }
        const languagesString = languagesArray.join(', ')
        const comment = `/** ${languagesString} */`
        allProperties += `    ${comment}\n    | ${property} \n`
        syntaxKeys.push(property)
    }
    outStream.write(`${generatedNote}

export type SyntaxHighlightStyle = {
    color: string,
    fade_out?: number,
    italic?: boolean,
    underline?: boolean,
    weight?: string,
}

export type Syntax = Record<SyntaxProperty, SyntaxHighlightStyle>
export type SyntaxOverride = Partial<Syntax>

export type SyntaxProperty = \n${defaultTextProperty}\n\n${allProperties}

export const allSyntaxKeys: SyntaxProperty[] = [\n    ${syntaxKeys.join(',\n    ')}\n]`)
    outStream.end()
}

main().catch(console.error)
