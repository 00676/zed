package zed:lsp-adapter

world lsp-adapter {
    type object-id = u64

    import zed-log: func(text: string)

    record file-info {
        is-dir: bool,
        is-symlink: bool,
    }

    import zed-fs-file-info: func(path: string) -> option<file-info>
    import zed-fs-read-dir: func(path: string) -> option<list<result<string>>>

    record npm-package {
        name: string,
        version: string,
    }

    import zed-node-runtime-acquire: func() -> object-id
    import zed-node-runtime-binary-path: func(id: object-id) -> result<string>
    import zed-node-runtime-npm-package-latest-version: func(id: object-id, %package: string) -> result<string>
    import zed-node-runtime-npm-install-packages: func(id: object-id, dir: string, packages: list<npm-package>) -> result
    import zed-node-runtime-npm-run-subcommand: func(id: object-id, dir: option<string>, subcommand: string, args: list<string>) -> result

    record language-server-binary {
        path: string,
        arguments: list<string>,
    }

    export name: func() -> string
    export fetch-latest-server-version: func() -> result<string>
    export fetch-server-binary: func(version: string, container-dir: string) -> result<language-server-binary>
    export cached-server-binary: func(container-dir: string) -> option<language-server-binary>
    export can-be-reinstalled: func() -> bool
    export installation-test-binary: func(container-dir: string) -> option<language-server-binary>
    export initialization-options: func() -> option<string> // TODO: json encoded
    export workspace-configuration: func() -> option<string> // TODO: json encoded
    export language-ids: func() -> list<tuple<string, string>>
}
