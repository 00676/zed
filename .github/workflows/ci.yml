name: CI

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    branches:
      - "**"

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: 1

jobs:
  tests:
    name: Run tests
    runs-on:
      - self-hosted
      - test
    env:
      RUSTFLAGS: -D warnings
    steps:
      - name: Install Rust
        run: |
          rustup set profile minimal
          rustup update stable
          rustup target add wasm32-wasi

      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          clean: false
          submodules: 'recursive'
            
      - name: Run tests
        run: cargo test --workspace --no-fail-fast
    
      - name: Build collab binaries
        run: cargo build --bins --all-features 

  bundle:
    name: Bundle app
    runs-on:
      - self-hosted
      - bundle
    env:
      MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
      MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
      APPLE_NOTARIZATION_USERNAME: ${{ secrets.APPLE_NOTARIZATION_USERNAME }}
      APPLE_NOTARIZATION_PASSWORD: ${{ secrets.APPLE_NOTARIZATION_PASSWORD }}
      ZED_AMPLITUDE_API_KEY: ${{ secrets.ZED_AMPLITUDE_API_KEY }}
      ZED_MIXPANEL_TOKEN: ${{ secrets.ZED_MIXPANEL_TOKEN }}
    steps:
      - name: Install Rust
        run: |
          rustup set profile minimal
          rustup update stable
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin
          rustup target add wasm32-wasi

      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          clean: false
          submodules: 'recursive'

      - name: Check that tag version matches package version
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          set -eu
          crate_version=$(script/get-crate-version zed)
          tag_version=$(echo $GITHUB_REF_NAME | sed -e 's/^v//' -e 's/-pre$//')
          if [[ $tag_version != $crate_version ]]; then
            echo "zed crate version $crate_version does not match git tag version $tag_version"
            exit 1
          fi
          echo "Publishing zed version: $crate_version"

      - name: Enable the preview channel
        if: ${{ startsWith(github.ref, 'refs/tags/v') && endsWith(github.ref, '-pre') }}
        run: |
          echo "ZED_PREVIEW_CHANNEL=1 >> $GITHUB_ENV

      - name: Create app bundle
        run: script/bundle

      - name: Upload app bundle to workflow run if main branch
        uses: actions/upload-artifact@v2
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          name: Zed.dmg
          path: target/release/Zed.dmg

      - uses: softprops/action-gh-release@v1
        name: Upload app bundle to release if release tag
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        with:
          draft: true
          prerelease: ${{ endsWith(github.ref, '-pre') }}
          files: target/release/Zed.dmg
          overwrite: true
          body: ""
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
